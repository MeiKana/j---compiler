1. Enter the number of hours it took you to complete the project between
   the <<< and >>> signs below (eg, <<<10>>>).

   <<< 30 >>>
   
2. Enter the difficulty level (1: very easy; 5: very difficult) of the project
   between the <<< and >>> signs below (eg, <<<3>>>).

   <<< 5 >>>

3. Provide a short description of how you approached each problem, issues you 
   encountered, and how you resolved those issues.

   Problem 1 (Long and Double Basic Types): 
	For codegen():check the number is 1 or 0 or other, if is 1 or 0, add
const on it, else add an ldc on it.
	Them, add (J) and (D) in descriptorFor() method in Type.java.
	modify JVariable.java, let it support the store and load for this 
two type(lload and dload etc.)
	add new if branchs in every operator class to let them support 
the double and long operation.(use DADD and LADD etc.) But since the test
case dosen't need to support implicit conversion too pass, I didn't 
implement it because it is too difficult
   Problem 2 (Operators):
	add if branches on exist operators to support the operation of long
and double.
	them just copy the similar existing operators, change the bytecode 
instruction added in codegen() to support the correspond new operators.
To get this new instruction, I checked the JVM Specification.
	
   
   Problem 3 (Conditional Expression): 
	Just imitate the existing if-statement because there very similar!
Be sure the to set the type to boolean in analyze(). I forgot to set it at
the beginning so it crashes


   Problem 4 (Switch Statement):
	This is so hard, I use hashtable to save the list of cases and case 
statement (that was silly). Since all case number are only allow use int,
char, doule and long, we can simply use a cast operation to them, and we 
can get the case number and determine which is the highest and lowest.
And use Lookuptable or Switchtable.

   Problem 5 (Do-while Statement):
	It's very similar to while statement, the only differnce is the
comparsion is at the bottom and the jump condition is ontrue.

   Problem 6 (For Statement): I treat it like a while statement like
this:
	int i;
	while( condition )
	   body statements
	   i++

   Problem 7 (Interface Type Declarations): I tried to read the textbook 
carefully and google it many time, but it still meet an exception from 
CLEmitter.

   Problem 8 (Exception Handlers): 
	analyzing the JFormalParameter for the catch parameters is the 
hardest part. I analyses it like a Variable Declarator, save the 
Exception e into the local context. Analyzing the other one use same 
method as before.
	In codegen(), I still cannot understand how to use 
addExceptionHandler(), I tried many times to find the position of this
line, but it still doesnâ€™t work for all the case.
	
4. Did you receive help from anyone? List their names, status (classmate, 
   CS451/651 grad, TA, other), and the nature of help received.

   Name               Status       Help Received
   ----               ------       -------------

   none

5. List any other comments here. Feel free to provide any feedback on how
   much you learned from doing the assignment, and whether you enjoyed
   doing it.

   It need to much time.
